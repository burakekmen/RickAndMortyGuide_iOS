//
//  Dictionary+Extensions.swift
//  RickAndMortyGuide
//
//  
//

import Foundation

public extension Dictionary {

    func decode<T:Codable>() throws -> T {
        return try JSONDecoder().decode(T.self, from: jsonData ?? Data())
    }

    var jsonData: Data? {
        return try? JSONSerialization.data(withJSONObject: self, options: [.prettyPrinted])
    }

    func toJSONString() -> String? {
        if let jsonData = jsonData {
            let jsonString = String(data: jsonData, encoding: .utf8)
            return jsonString
        }

        return nil
    }

    /**
     Merges the dictionary with dictionaries passed. The latter dictionaries will override
     values of the keys that are already set
     
     - parameter dictionaries: A comma seperated list of dictionaries
     */
    mutating func merge<K, V>(_ dictionaries: Dictionary<K, V>...) {
        for dict in dictionaries {
            for (key, value) in dict {
                self.updateValue(value as! Value, forKey: key as! Key)
            }
        }
    }

    /**
     Combine the two dictionary
     
     - parameter left:  The left dictionary
     - parameter right: The right dictionary
     
     - returns: The new dictionary.
     */
    func combine<K, V>(_ left: Dictionary<K, V>, right: Dictionary<K, V>) -> Dictionary<K, V> {
        var map = Dictionary<K, V>()
        for (k, v) in left {
            map[k] = v
        }
        for (k, v) in right {
            map[k] = v
        }
        return map
    }

    //https://github.com/pNre/ExSwift/blob/master/ExSwift/Dictionary.swift
    /**
     Creates an Array with values generated by running
     each [key: value] of self through the mapFunction.
     
     - parameter map: map Function
     
     - returns: Mapped array
     */
    func toArray<V>(_ map: (Key, Value) -> V) -> [V] {
        var mapped = [V]()
        each {
            mapped.append(map($0, $1))
        }
        return mapped
    }

    /**
     Loops trough each [key: value] pair in self.
     
     - parameter each: Function to inovke on each loop
     */
    func each(_ each: (Key, Value) -> ()) {
        for (key, value) in self {
            each(key, value)
        }
    }

    /**
     Returns a copy of self, filtered to only have values for the whitelisted keys.
     
     - parameter keys: Whitelisted keys
     
     - returns: Filtered dictionary
     */
    func pick(_ keys: [Key]) -> Dictionary {
        return filter { (key: Key, _) -> Bool in
            return keys.contains(key)
        }
    }

    /**
     Constructs a dictionary containing every [key: value] pair from self
     for which testFunction evaluates to true.
     
     - parameter test: Function called to test each key, value
     
     - returns: Filtered dictionary
     */
    func filter(_ test: (Key, Value) -> Bool) -> Dictionary {
        var result = Dictionary()
        for (key, value) in self {
            if test(key, value) {
                result[key] = value
            }
        }
        return result
    }
}

extension Encodable {
  func asDictionary() throws -> [String: Any] {
    let data = try JSONEncoder().encode(self)
    guard let dictionary = try JSONSerialization.jsonObject(with: data, options: .allowFragments) as? [String: Any] else {
      throw NSError()
    }
    return dictionary
  }
}
